// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETREMOVEPLAYER_FPACKET_H_
#define FLATBUFFERS_GENERATED_PACKETREMOVEPLAYER_FPACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace fpacket {

struct PacketRemovePlayer;

struct PacketRemovePlayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  int32_t id() const { return GetField<int32_t>(VT_ID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct PacketRemovePlayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(PacketRemovePlayer::VT_ID, id, 0); }
  PacketRemovePlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketRemovePlayerBuilder &operator=(const PacketRemovePlayerBuilder &);
  flatbuffers::Offset<PacketRemovePlayer> Finish() {
    auto o = flatbuffers::Offset<PacketRemovePlayer>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<PacketRemovePlayer> CreatePacketRemovePlayer(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0) {
  PacketRemovePlayerBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const fpacket::PacketRemovePlayer *GetPacketRemovePlayer(const void *buf) { return flatbuffers::GetRoot<fpacket::PacketRemovePlayer>(buf); }

inline bool VerifyPacketRemovePlayerBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpacket::PacketRemovePlayer>(); }

inline void FinishPacketRemovePlayerBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpacket::PacketRemovePlayer> root) { fbb.Finish(root); }

}  // namespace fpacket

#endif  // FLATBUFFERS_GENERATED_PACKETREMOVEPLAYER_FPACKET_H_
