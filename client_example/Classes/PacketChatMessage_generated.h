// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETCHATMESSAGE_FPACKET_H_
#define FLATBUFFERS_GENERATED_PACKETCHATMESSAGE_FPACKET_H_

#include "flatbuffers.h"

namespace fpacket {

struct PacketChatMessage;

struct PacketChatMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_MSG = 6
  };
  int32_t id() const { return GetField<int32_t>(VT_ID, 0); }
  const flatbuffers::String *msg() const { return GetPointer<const flatbuffers::String *>(VT_MSG); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MSG) &&
           verifier.Verify(msg()) &&
           verifier.EndTable();
  }
};

struct PacketChatMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(PacketChatMessage::VT_ID, id, 0); }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) { fbb_.AddOffset(PacketChatMessage::VT_MSG, msg); }
  PacketChatMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketChatMessageBuilder &operator=(const PacketChatMessageBuilder &);
  flatbuffers::Offset<PacketChatMessage> Finish() {
    auto o = flatbuffers::Offset<PacketChatMessage>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PacketChatMessage> CreatePacketChatMessage(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> msg = 0) {
  PacketChatMessageBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const fpacket::PacketChatMessage *GetPacketChatMessage(const void *buf) { return flatbuffers::GetRoot<fpacket::PacketChatMessage>(buf); }

inline bool VerifyPacketChatMessageBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpacket::PacketChatMessage>(); }

inline void FinishPacketChatMessageBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpacket::PacketChatMessage> root) { fbb.Finish(root); }

}  // namespace fpacket

#endif  // FLATBUFFERS_GENERATED_PACKETCHATMESSAGE_FPACKET_H_
